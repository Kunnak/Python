import re

def is_valid_phone_number(phone_number):
    pattern = r"^\d{3}-\d{3}-\d{4}$"
    return re.match(pattern, phone_number) is not None

def is_valid_email(email):
    pattern = r"^\w[a-zA-Z._%+-]+@[a-zA-Z._%+-]+\.[a-zA-Z]{2,}$"
    return re.match(pattern, email) is not None

def find_urls(text):
    pattern = r"https?://(?:www\.)?\w+\.\w+(?:/\w+)*"
    return re.findall(pattern, text)

def find_hashtags(text):
    pattern = r"#\w"
    return re.findall(pattern, text)

def is_valid_password(passwort):
    pattern = r"^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[.\-*!§$%&])[A-Za-z\d.\-*!§$%&]{8,}$"
    return re.match(pattern, passwort) is not None

def replace_word(text, old_word, new_word):
    pattern = r"\w+"
    words = re.findall(pattern, text)
    output = [new_word if word == old_word else word for word in words]
    return output

def extract_numbers(text):
    pattern = r"\d"
    return re.findall(pattern, text)

def is_valis_ip(ip):
    pattern = r"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(:\d{1,4})?$"
    return re.match(pattern, ip) is not None

def get_datum(text):
    pattern = r"^([0-9]{2})\.([0-9]{2})\.([0-9]{4})$"
    return re.match(pattern, text) is not None

def get_upper(text):
    pattern = r"\b[A-Z][a-z]*\b"
    return re.findall(pattern, text)
text_ = ("Hallo mein Name ist Yannick Spangel. Ich bin 29 Jahre alt und arbeite als Fachinformatiker in einem "
         "Familienbetrieb MIBS AG in Mülheim")

def is_valid_username(username):
    pattern = r"^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)[A-Za-z0-9@$!&%?€]{3,16}$"
    return re.match(pattern, username) is not None

def is_valid_date(date):
    pattern = r"^([0-9]{2})(.)([0-9]{2})(.)([0-9]{4})$"
    result = re.findall(pattern, date)
    for item in result:
        if int(item[0]) <= 31 and int(item[2]) <= 12:
            return f"das Datum: {date} ist Valide"
        else:
            return f"das Datum: {date} ist nicht Valide"
