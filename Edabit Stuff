import math
import random
import keyboard


# Liste sortieren

'''
menge = input("wieviele Zahlen sollen in die Liste ? : ")
wdh = 0
liste = []

def add_liste(menge, wdh):
    while wdh < int(menge):
        zahl = input("Zahl : ")
        zahl = int(zahl)
        liste.append(zahl)
        wdh += 1

add_liste(menge, wdh)
print(liste)

def sortieren(reihenfolge):
    if reihenfolge == "asc":
        asc_liste = sorted(liste)
        print(asc_liste)
    if reihenfolge == "dsc":
        dsc_liste = sorted(liste, reverse=True)
        print(dsc_liste)
    if reihenfolge == "none":
        print(liste)

reihenfolge = input("Wie soll die Liste sortiert werden ? [ 'asc' | 'dsc' | 'none' ] : ")
sortieren(reihenfolge)
'''

# Dezimal zu Binär

'''
def on_esc_pressed(e):
    if e.event_type == keyboard.KEY_DOWN:
        keyboard.unhook_all()  # Alle Tastaturhaken entfernen
        exit()  # Das Programm beenden

# schauen ob die escape taste gedrückt wird
keyboard.hook_key('esc', on_esc_pressed)

def umrechnung_dez_zu_bin(dezimalzahl):
    global binanzeige
    if dezimalzahl == 0:
        return "0"

    while dezimalzahl > 0:
        sinn = dezimalzahl % 2
        binzahl = binstellen.append(str(sinn))
        dezimalzahl //= 2

        binanzeige = ''.join(reversed(binstellen))
    print(binanzeige)

# Hauptprogrammschleife
while True:
    dezimalzahl = input("Dezimalzahl :  ")
    dezimalzahl = int(dezimalzahl)
    binstellen = []
    umrechnung_dez_zu_bin(dezimalzahl)
'''

# Vokale zählen in einem String

'''
def count_vokale(wort):
    wort = wort.lower()
    vokale = ['a', 'e', 'i', 'o', 'u']
    anzahl = 0
    for letter in wort:
        if letter in vokale:
            anzahl += 1
    return anzahl
    
wort = input("Wort: ")
ergebnis = count_vokale(wort)
print(f"Das Wort '{wort}' enthält {ergebnis} Vokale.")
'''

# Code verstecken bis auf die letzten 4 Ziffern

'''
def verstecke_ausgabe(id):
    count = 0
    for buchstabe in id:
        count += 1
        liste.append(buchstabe)
    if count != 12:
        print("Eingabe nicht korrekt !")
        quit()
    print('*', '*', '*', '*', '*', '*', '*', '*', liste[count - 4],liste[count - 3],liste[count - 2],liste[count - 1])

id = input("Zahl (12 Ziffern): ")
liste = []
verstecke_ausgabe(id)
'''

# Vergleich ob Anzahl von "A" und "E" gleich ist

'''
def count_a_e(wort):
    for buchstabe in wort:
        liste.append(buchstabe)

    count_a = 0
    count_e = 0
    
    for item in liste:
        if item in a:
            count_a += 1
        if item in e:
            count_e += 1
            
    if count_a == count_e:
        print("True")
    else:
        print("False")

wort = input ("Wort: ")
liste = []
a = ['a']
e = ['e']

count_a_e(wort)
'''

# Taschenrechner

'''
def rechnung(x, y, operator):
    if operator == '+':
        summe = int(x) + int(y)
    if operator == '-':
        summe = int(x) - int(y)
    if operator == '/':
        summe = int(x) / int(y)
    if operator == '*':
        summe = int(x) * int(y)
    print(summe)

x = input('X = ')
y = input('Y = ')
operator = input('+ | - | / | *  = ')

rechnung(x, y, operator)
'''

# Rabattberechnung

'''
def rabatt_berechnen(preis, rabatt):
    summe = int(preis) - ((int(preis) / 100) * int(rabatt))
    print(int(summe))

preis = input('Preis: ')
rabatt = input('Rabatt: ')

rabatt_berechnen(preis, rabatt)
'''
# Selektion von Zahlen aus einer Liste mit Strings und Zahlen

'''
def get_zahlen(liste):
    for item in liste:
        if type(item) == int:
            liste_neu.append(item)

    print(liste_neu)

liste = ['a', 452, 'g', 546, 'p', 'c',785, 'r', 't', 68, 'd', 648]
liste_neu = []

get_zahlen(liste)
'''

# Ausgabe verdoppeln

'''
def verdoppeln(string):
    for buchstabe in string:
        liste.append(buchstabe)
        liste.append(buchstabe)

string = input('String: ')
liste = []

verdoppeln(string)

ausgabe = ''.join(liste)
print(ausgabe)
'''

# Stotter Funktion

'''
def stottern(string):
    for item in string:
        liste.append(item)
        
    liste2.append(liste[0])
    liste2.append(liste[1])
    stotter = ''.join(liste2) + '...'
    print(stotter, stotter, string, '?')

string = input('String: ')
liste = []
liste2 = []

stottern(string)
'''

# Range Funktion

'''
def range(x, y):
    ende = y + 1
    
    while x != ende:
        if x != ende:
            liste.append(x)
            x += 1

    print(liste)

x = int(input("X = "))
y = int(input("Y = "))
liste = []
range(x, y)
'''

# Zahl halbieren und Hälften ausgeben

'''
def teilen(zahl):
    h1 = float(zahl) / 2
    h2 = float(zahl) / 2
    
    if h2 % 1 != 0:
        h2 = h2 + 0.5
        h1 = h1 - 0.5
        liste.append(int(h1))
        liste.append(int(h2))
    else:
        liste.append(int(h1))
        liste.append(int(h2))

zahl = int(input("Zahl = "))
liste = []

teilen(zahl)
print(liste)
'''

# Invert Colorcode (0, 0, 0) -> (255, 255, 255)

'''
def invert_colorcode(code):
    num1 = constant - int(code[0])
    num2 = constant - int(code[1])
    num3 = constant - int(code[2])

    liste.append(num1)
    liste.append(num2)
    liste.append(num3)
    print(liste)

liste = []
colorcode = input("Colorcode: ")
constant = 255
code = colorcode.split()

invert_colorcode(code)
'''

# Mood Funktion

'''
def mood(eingabe):
    if eingabe == "happy":
        print("Today, I am feeling happy")
    if eingabe == "sad":
        print("Today, I am feeling sad")
    if eingabe == "":
        print("Today, I am feeling neutral")

mood("happy")
'''

# Volume in Gewicht [Zylinder]

'''
def gewicht(r, h):
    summe = ((math.pi * (r * r)) * h) / 1000
    print(round(summe, 2))

gewicht(15, 10)
'''

# Satz des Pythagoras

'''
def pythagoras(sort_liste):
    num1 = int(sort_liste[0]) * int(sort_liste[0])
    num2 = int(sort_liste[1]) * int(sort_liste[1])
    num3 = int(sort_liste[2]) * int(sort_liste[2])

    if num1 + num2 == num3:
        print("True")
    else:
        print("False")

eingabe = input("Zahlen: ")
teilung = eingabe.split()
int_teilung = [int(eintrag) for eintrag in teilung]
sort_liste = sorted(int_teilung)

pythagoras(sort_liste)
'''

# Summer aller Zahlen die Teilbar durch d sind, innerhalb der Range von X und Y

'''
def summe(userinput):
    summe = 0
    summen_liste = []
    splitted_liste = userinput.split()
    integer_liste = [int(item) for item in splitted_liste]
    x = integer_liste[0]
    y = integer_liste[1]
    d = integer_liste[2]
    range_liste = list(range(x, y))
    range_liste.append(y)
    
    for i in range_liste:
        if i % d == 0:
            summen_liste.append(i)

    for i in summen_liste:
        summe = summe + i
    print(summe)

start_liste = []
userinput = input("X, Y, Divisor: ")

summe(userinput)
'''

# Zeitumrechnen

'''
def stunde_zu_sekunde(stunde):
    minute = int(stunde) * 60
    print("in Minuten: ", minute, "min")
    sekunde = int(minute) * 60
    print("in Sekunden: ", sekunde, "sek")
    
userinput = input("Stunden: ")

stunde = int(userinput)
stunde_zu_sekunde(stunde)
'''

# Recursive max()-Funktion

'''
def recursion(liste, datei):

    for item in liste:
        if item > datei:
            datei = item
    print(datei)

liste = [1, 56, 35 , 18, 48, 16, 8, 71, 3, 55, 82, 29, 24, 70, 39, 6]
datei = liste[0]

recursion(liste, datei)
'''

# Längenfunktion einer Zahl

'''
def stellen_einer_zahl():
    wdh = 0
    
    if zahl.isdigit():
        for i in zahl:
            wdh += 1
            
        print(wdh)
    else:
        print("Keine Zahlen")
        
zahl = input("Zahl: ")
stellen_einer_zahl()
'''

# Länge zwischen 2 Koordinaten

'''
def abstand(userinput1, userinput2):
    x1, y1 = userinput1
    x2, y2 = userinput2
    differenz_x = x2 - x1
    differenz_y = y2 - y1
    laenge = math.sqrt(differenz_x ** 2 + differenz_y ** 2)
    return laenge

userinput1 = input("Koordinate 1 (X, Y): ")
userinput2 = input("Koordinate 2 (X, Y): ")

num1 = tuple(map(int, userinput1.split(",")))
num2 = tuple(map(int, userinput2.split(",")))

print(num1)
print(num2)

result = abstand(num1, num2)
print(round(result, 2))
'''

# Berechnung Unterschied Inkreis

'''
def berechnung_inkreis(r):
    a1 = (r * 2) ** 2
    a2 = a1 / 2
    result = a1 - a2
    print(int(result))

r = int(input("Radius: "))

berechnung_inkreis(r)
'''

# gerade Zahlen und ungerrade Zahlen in einer Liste zusammenzählen

'''
liste = []
liste2 = []

lol = 0

zahl = int(input("Zahl eingeben: "))
liste.append(zahl)
frage = ""

while frage != "nein":
    zahl = int(input("Zahle eingeben: "))
    liste.append(zahl)
    frage = input("noch eine zahl eingeben ? (ja / nein): ")
else:
    print(liste)

for i in liste:
    if i % 2 == 0:
        i = i + i

liste2.append(i)

for i in liste:
    if i % 2 != 0:
        lol = lol + i
        print(lol)

liste2.append(lol)

print(liste2)
'''

# Hex to Binary

'''
def hex_to_binary(hex_num):
    try:
        dezimal = int(hex_num, 16)
        binary = bin(dezimal)
        return binary[2:]
    except ValueError:
        return "Ungültige HEX-Eingabe"

hex_input = input("HEX-Zahl: ")
binary_ergebnis = hex_to_binary(hex_input)
print(f"Die Binärzahl von {hex_input} ist: {binary_ergebnis}")

'''

# Algorithm 1 Recursion

'''

num = int(input("x= "))
def factorial(num):
    if int(num) == 0:
        return 1
    else:
        return int(num) * factorial(num - 1)

print(factorial(num))

'''

# Adjacent Nodes

'''

def nodes(matrix, node1, node2):
    return matrix[node1][node2] == 1

matrix = [
  [ 0, 1, 0, 1, 1 ],
  [ 1, 0, 1, 0, 0 ],
  [ 0, 1, 0, 1, 0 ],
  [ 1, 0, 1, 0, 1 ],
  [ 1, 0, 0, 1, 0 ]
]

print(nodes(matrix, 1, 4))

'''

# DAC Volt umrechnen

'''

def dezimal_in_analog(dezimalwert):
    num_bits = 10
    referenzspannung = 5.00
    aufloesung = 2 ** num_bits
    spannungszunahme = referenzspannung / aufloesung
    analogspannung = dezimalwert * spannungszunahme
    return analogspannung

dezimalwert = 400
analogspannung = dezimal_in_analog(dezimalwert)
print("Analoge Spannung: ", round(analogspannung, 2)," Volt")

'''

# Fizz Buzz Ausgabe MOD 3 | 5

'''

num = int(input("Zahl: "))

def fizz_buzz(num):
    if num % 3 == 0 and num % 5 == 0:
        print("FizzBuzz")
    elif num % 3 != 0 and num % 5 != 0:
        print(str(num))
    elif num % 3 == 0:
        print("Fizz")
    elif num % 5 == 0:
        print("Buzz")

fizz_buzz(num)

'''

# Höchste Zahl in einer Liste

'''

liste = [-1, 3, 5, 6, 99, 12, 2]
def highest_num(liste):
    if len(liste) == 1:
        return liste[0]
    else:
        highest = highest_num(liste[1:])
        if liste[0] > highest:
            return liste[0]
        else:
            return highest

print(highest_num(liste))

'''

# schritte abarbeiten

'''

kasten = 0
def anzahl_schachteln(schritt):
    global kasten
    if schritt == 0:
        return 0
    elif schritt % 2 != 0:
        kasten = kasten + 3
        return kasten
    elif schritt % 2 == 0:
        kasten = kasten -1
        return kasten

print(anzahl_schachteln(0))
print(anzahl_schachteln(1))
print(anzahl_schachteln(2))
print(anzahl_schachteln(3))
print(anzahl_schachteln(4))
print(anzahl_schachteln(5))
print(anzahl_schachteln(6))

'''

# FLip Bits

'''

def flip_bits(num):
    bits = (1 << 32) - 1
    result = num ^ bits
    return result

zahl = 4
flipped_zahl = flip_bits(zahl)
print(flipped_zahl)

'''

#

'''



'''
